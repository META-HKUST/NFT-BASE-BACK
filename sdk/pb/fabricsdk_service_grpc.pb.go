// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: fabricsdk_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FabricSDKClient is the client API for FabricSDK service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FabricSDKClient interface {
	BalanceOf(ctx context.Context, in *BalanceOfResuest, opts ...grpc.CallOption) (*BalanceOfResponse, error)
	OwnerOf(ctx context.Context, in *OwnerOfRequest, opts ...grpc.CallOption) (*OwnerOfResponse, error)
	Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error)
	SetApprovalForAll(ctx context.Context, in *SetApprovalForAllRequest, opts ...grpc.CallOption) (*SetApprovalForAllResponse, error)
	IsApprovedForAll(ctx context.Context, in *IsApprovedForAllRequest, opts ...grpc.CallOption) (*IsApprovedForAllResponse, error)
	GetApproved(ctx context.Context, in *GetApprovedRequest, opts ...grpc.CallOption) (*GetApprovedResponse, error)
	TransferFrom(ctx context.Context, in *TransferFromRequest, opts ...grpc.CallOption) (*TransferFromResponse, error)
	ClientAccountBalance(ctx context.Context, in *ClientAccountBalanceRequest, opts ...grpc.CallOption) (*ClientAccountBalanceResponse, error)
	ClientAccountID(ctx context.Context, in *ClientAccountIDRequest, opts ...grpc.CallOption) (*ClientAccountIDResponse, error)
	TokenURI(ctx context.Context, in *TokenURIRequest, opts ...grpc.CallOption) (*TokenURIReqponse, error)
	SetChainCodeOwner(ctx context.Context, in *SetChainCodeOwnerRequest, opts ...grpc.CallOption) (*SetChainCodeOwnerResponse, error)
	GetChainCodeOwner(ctx context.Context, in *GetChainCodeOwnerRequest, opts ...grpc.CallOption) (*GetChainCodeOwnerResponse, error)
	SetBaseURI(ctx context.Context, in *SetBaseURIRequest, opts ...grpc.CallOption) (*SetBaseURIResponse, error)
	PublicMint(ctx context.Context, in *PublicMintRequest, opts ...grpc.CallOption) (*PublicMintResponse, error)
	PrivateBurn(ctx context.Context, in *PrivateBurnRequest, opts ...grpc.CallOption) (*PrivateBurnResponse, error)
	TotalSupply(ctx context.Context, in *TokenURIRequest, opts ...grpc.CallOption) (*TotalSupplyResponse, error)
	Enroll(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*EnrollResponse, error)
}

type fabricSDKClient struct {
	cc grpc.ClientConnInterface
}

func NewFabricSDKClient(cc grpc.ClientConnInterface) FabricSDKClient {
	return &fabricSDKClient{cc}
}

func (c *fabricSDKClient) BalanceOf(ctx context.Context, in *BalanceOfResuest, opts ...grpc.CallOption) (*BalanceOfResponse, error) {
	out := new(BalanceOfResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/BalanceOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) OwnerOf(ctx context.Context, in *OwnerOfRequest, opts ...grpc.CallOption) (*OwnerOfResponse, error) {
	out := new(OwnerOfResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/OwnerOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error) {
	out := new(ApproveResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) SetApprovalForAll(ctx context.Context, in *SetApprovalForAllRequest, opts ...grpc.CallOption) (*SetApprovalForAllResponse, error) {
	out := new(SetApprovalForAllResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/SetApprovalForAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) IsApprovedForAll(ctx context.Context, in *IsApprovedForAllRequest, opts ...grpc.CallOption) (*IsApprovedForAllResponse, error) {
	out := new(IsApprovedForAllResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/IsApprovedForAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) GetApproved(ctx context.Context, in *GetApprovedRequest, opts ...grpc.CallOption) (*GetApprovedResponse, error) {
	out := new(GetApprovedResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/GetApproved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) TransferFrom(ctx context.Context, in *TransferFromRequest, opts ...grpc.CallOption) (*TransferFromResponse, error) {
	out := new(TransferFromResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/TransferFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) ClientAccountBalance(ctx context.Context, in *ClientAccountBalanceRequest, opts ...grpc.CallOption) (*ClientAccountBalanceResponse, error) {
	out := new(ClientAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/ClientAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) ClientAccountID(ctx context.Context, in *ClientAccountIDRequest, opts ...grpc.CallOption) (*ClientAccountIDResponse, error) {
	out := new(ClientAccountIDResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/ClientAccountID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) TokenURI(ctx context.Context, in *TokenURIRequest, opts ...grpc.CallOption) (*TokenURIReqponse, error) {
	out := new(TokenURIReqponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/TokenURI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) SetChainCodeOwner(ctx context.Context, in *SetChainCodeOwnerRequest, opts ...grpc.CallOption) (*SetChainCodeOwnerResponse, error) {
	out := new(SetChainCodeOwnerResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/SetChainCodeOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) GetChainCodeOwner(ctx context.Context, in *GetChainCodeOwnerRequest, opts ...grpc.CallOption) (*GetChainCodeOwnerResponse, error) {
	out := new(GetChainCodeOwnerResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/GetChainCodeOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) SetBaseURI(ctx context.Context, in *SetBaseURIRequest, opts ...grpc.CallOption) (*SetBaseURIResponse, error) {
	out := new(SetBaseURIResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/SetBaseURI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) PublicMint(ctx context.Context, in *PublicMintRequest, opts ...grpc.CallOption) (*PublicMintResponse, error) {
	out := new(PublicMintResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/PublicMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) PrivateBurn(ctx context.Context, in *PrivateBurnRequest, opts ...grpc.CallOption) (*PrivateBurnResponse, error) {
	out := new(PrivateBurnResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/PrivateBurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) TotalSupply(ctx context.Context, in *TokenURIRequest, opts ...grpc.CallOption) (*TotalSupplyResponse, error) {
	out := new(TotalSupplyResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/TotalSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricSDKClient) Enroll(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*EnrollResponse, error) {
	out := new(EnrollResponse)
	err := c.cc.Invoke(ctx, "/FabricSDK/Enroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FabricSDKServer is the server API for FabricSDK service.
// All implementations must embed UnimplementedFabricSDKServer
// for forward compatibility
type FabricSDKServer interface {
	BalanceOf(context.Context, *BalanceOfResuest) (*BalanceOfResponse, error)
	OwnerOf(context.Context, *OwnerOfRequest) (*OwnerOfResponse, error)
	Approve(context.Context, *ApproveRequest) (*ApproveResponse, error)
	SetApprovalForAll(context.Context, *SetApprovalForAllRequest) (*SetApprovalForAllResponse, error)
	IsApprovedForAll(context.Context, *IsApprovedForAllRequest) (*IsApprovedForAllResponse, error)
	GetApproved(context.Context, *GetApprovedRequest) (*GetApprovedResponse, error)
	TransferFrom(context.Context, *TransferFromRequest) (*TransferFromResponse, error)
	ClientAccountBalance(context.Context, *ClientAccountBalanceRequest) (*ClientAccountBalanceResponse, error)
	ClientAccountID(context.Context, *ClientAccountIDRequest) (*ClientAccountIDResponse, error)
	TokenURI(context.Context, *TokenURIRequest) (*TokenURIReqponse, error)
	SetChainCodeOwner(context.Context, *SetChainCodeOwnerRequest) (*SetChainCodeOwnerResponse, error)
	GetChainCodeOwner(context.Context, *GetChainCodeOwnerRequest) (*GetChainCodeOwnerResponse, error)
	SetBaseURI(context.Context, *SetBaseURIRequest) (*SetBaseURIResponse, error)
	PublicMint(context.Context, *PublicMintRequest) (*PublicMintResponse, error)
	PrivateBurn(context.Context, *PrivateBurnRequest) (*PrivateBurnResponse, error)
	TotalSupply(context.Context, *TokenURIRequest) (*TotalSupplyResponse, error)
	Enroll(context.Context, *EnrollRequest) (*EnrollResponse, error)
	mustEmbedUnimplementedFabricSDKServer()
}

// UnimplementedFabricSDKServer must be embedded to have forward compatible implementations.
type UnimplementedFabricSDKServer struct {
}

func (UnimplementedFabricSDKServer) BalanceOf(context.Context, *BalanceOfResuest) (*BalanceOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceOf not implemented")
}
func (UnimplementedFabricSDKServer) OwnerOf(context.Context, *OwnerOfRequest) (*OwnerOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OwnerOf not implemented")
}
func (UnimplementedFabricSDKServer) Approve(context.Context, *ApproveRequest) (*ApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedFabricSDKServer) SetApprovalForAll(context.Context, *SetApprovalForAllRequest) (*SetApprovalForAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApprovalForAll not implemented")
}
func (UnimplementedFabricSDKServer) IsApprovedForAll(context.Context, *IsApprovedForAllRequest) (*IsApprovedForAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsApprovedForAll not implemented")
}
func (UnimplementedFabricSDKServer) GetApproved(context.Context, *GetApprovedRequest) (*GetApprovedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApproved not implemented")
}
func (UnimplementedFabricSDKServer) TransferFrom(context.Context, *TransferFromRequest) (*TransferFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFrom not implemented")
}
func (UnimplementedFabricSDKServer) ClientAccountBalance(context.Context, *ClientAccountBalanceRequest) (*ClientAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientAccountBalance not implemented")
}
func (UnimplementedFabricSDKServer) ClientAccountID(context.Context, *ClientAccountIDRequest) (*ClientAccountIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientAccountID not implemented")
}
func (UnimplementedFabricSDKServer) TokenURI(context.Context, *TokenURIRequest) (*TokenURIReqponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenURI not implemented")
}
func (UnimplementedFabricSDKServer) SetChainCodeOwner(context.Context, *SetChainCodeOwnerRequest) (*SetChainCodeOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChainCodeOwner not implemented")
}
func (UnimplementedFabricSDKServer) GetChainCodeOwner(context.Context, *GetChainCodeOwnerRequest) (*GetChainCodeOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainCodeOwner not implemented")
}
func (UnimplementedFabricSDKServer) SetBaseURI(context.Context, *SetBaseURIRequest) (*SetBaseURIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBaseURI not implemented")
}
func (UnimplementedFabricSDKServer) PublicMint(context.Context, *PublicMintRequest) (*PublicMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicMint not implemented")
}
func (UnimplementedFabricSDKServer) PrivateBurn(context.Context, *PrivateBurnRequest) (*PrivateBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateBurn not implemented")
}
func (UnimplementedFabricSDKServer) TotalSupply(context.Context, *TokenURIRequest) (*TotalSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSupply not implemented")
}
func (UnimplementedFabricSDKServer) Enroll(context.Context, *EnrollRequest) (*EnrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enroll not implemented")
}
func (UnimplementedFabricSDKServer) mustEmbedUnimplementedFabricSDKServer() {}

// UnsafeFabricSDKServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FabricSDKServer will
// result in compilation errors.
type UnsafeFabricSDKServer interface {
	mustEmbedUnimplementedFabricSDKServer()
}

func RegisterFabricSDKServer(s grpc.ServiceRegistrar, srv FabricSDKServer) {
	s.RegisterService(&FabricSDK_ServiceDesc, srv)
}

func _FabricSDK_BalanceOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceOfResuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).BalanceOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/BalanceOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).BalanceOf(ctx, req.(*BalanceOfResuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_OwnerOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).OwnerOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/OwnerOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).OwnerOf(ctx, req.(*OwnerOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).Approve(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_SetApprovalForAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApprovalForAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).SetApprovalForAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/SetApprovalForAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).SetApprovalForAll(ctx, req.(*SetApprovalForAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_IsApprovedForAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsApprovedForAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).IsApprovedForAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/IsApprovedForAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).IsApprovedForAll(ctx, req.(*IsApprovedForAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_GetApproved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApprovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).GetApproved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/GetApproved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).GetApproved(ctx, req.(*GetApprovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_TransferFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).TransferFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/TransferFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).TransferFrom(ctx, req.(*TransferFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_ClientAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).ClientAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/ClientAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).ClientAccountBalance(ctx, req.(*ClientAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_ClientAccountID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientAccountIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).ClientAccountID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/ClientAccountID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).ClientAccountID(ctx, req.(*ClientAccountIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_TokenURI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenURIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).TokenURI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/TokenURI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).TokenURI(ctx, req.(*TokenURIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_SetChainCodeOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChainCodeOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).SetChainCodeOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/SetChainCodeOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).SetChainCodeOwner(ctx, req.(*SetChainCodeOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_GetChainCodeOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainCodeOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).GetChainCodeOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/GetChainCodeOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).GetChainCodeOwner(ctx, req.(*GetChainCodeOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_SetBaseURI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBaseURIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).SetBaseURI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/SetBaseURI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).SetBaseURI(ctx, req.(*SetBaseURIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_PublicMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).PublicMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/PublicMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).PublicMint(ctx, req.(*PublicMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_PrivateBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateBurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).PrivateBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/PrivateBurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).PrivateBurn(ctx, req.(*PrivateBurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_TotalSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenURIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).TotalSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/TotalSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).TotalSupply(ctx, req.(*TokenURIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricSDK_Enroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricSDKServer).Enroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FabricSDK/Enroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricSDKServer).Enroll(ctx, req.(*EnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FabricSDK_ServiceDesc is the grpc.ServiceDesc for FabricSDK service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FabricSDK_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FabricSDK",
	HandlerType: (*FabricSDKServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BalanceOf",
			Handler:    _FabricSDK_BalanceOf_Handler,
		},
		{
			MethodName: "OwnerOf",
			Handler:    _FabricSDK_OwnerOf_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _FabricSDK_Approve_Handler,
		},
		{
			MethodName: "SetApprovalForAll",
			Handler:    _FabricSDK_SetApprovalForAll_Handler,
		},
		{
			MethodName: "IsApprovedForAll",
			Handler:    _FabricSDK_IsApprovedForAll_Handler,
		},
		{
			MethodName: "GetApproved",
			Handler:    _FabricSDK_GetApproved_Handler,
		},
		{
			MethodName: "TransferFrom",
			Handler:    _FabricSDK_TransferFrom_Handler,
		},
		{
			MethodName: "ClientAccountBalance",
			Handler:    _FabricSDK_ClientAccountBalance_Handler,
		},
		{
			MethodName: "ClientAccountID",
			Handler:    _FabricSDK_ClientAccountID_Handler,
		},
		{
			MethodName: "TokenURI",
			Handler:    _FabricSDK_TokenURI_Handler,
		},
		{
			MethodName: "SetChainCodeOwner",
			Handler:    _FabricSDK_SetChainCodeOwner_Handler,
		},
		{
			MethodName: "GetChainCodeOwner",
			Handler:    _FabricSDK_GetChainCodeOwner_Handler,
		},
		{
			MethodName: "SetBaseURI",
			Handler:    _FabricSDK_SetBaseURI_Handler,
		},
		{
			MethodName: "PublicMint",
			Handler:    _FabricSDK_PublicMint_Handler,
		},
		{
			MethodName: "PrivateBurn",
			Handler:    _FabricSDK_PrivateBurn_Handler,
		},
		{
			MethodName: "TotalSupply",
			Handler:    _FabricSDK_TotalSupply_Handler,
		},
		{
			MethodName: "Enroll",
			Handler:    _FabricSDK_Enroll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fabricsdk_service.proto",
}
